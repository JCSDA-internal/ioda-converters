#!/usr/bin/env python

#
# (C) Copyright 2020 UCAR
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#

import sys
import argparse
import netCDF4 as nc
import numpy as np
from datetime import datetime, timedelta

sys.path.append("@SCRIPT_LIB_PATH@")
import ioda_conv_ncio as iconv
from orddicts import DefaultOrderedDict

vName = {
    'A': "aerosol_optical_depth_4",
}

locationKeyList = [
    ("latitude", "float"),
    ("longitude", "float"),
    ("datetime", "string")
]

AttrData = {}


class AOD(object):

    def __init__(self, filename, writer):
        self.filename = filename
        self.data = DefaultOrderedDict(lambda: DefaultOrderedDict(dict))
        self.writer = writer
        self._read()

    def _read(self):
        ncd = nc.Dataset(self.filename)
        lons = ncd.variables['Longitude'][:].flatten()
        lats = ncd.variables['Latitude'][:].flatten()
        vals = ncd.variables['AOD550'][:].flatten()
        errs = ncd.variables['Residual'][:].flatten()
        qcpath = ncd.variables['QCPath'][:].flatten()
        qcall = ncd.variables['QCAll'][:].flatten()
        # get global attributes
        gatts = {attr: getattr(ncd, attr) for attr in ncd.ncattrs()}
        base_datetime = gatts["time_coverage_end"]
        self.satellite = gatts["satellite_name"]
        self.sensor = gatts["instrument_name"]
        ncd.close()

        valKey = vName['A'], self.writer.OvalName()
        errKey = vName['A'], self.writer.OerrName()
        qcKey = vName['A'], self.writer.OqcName()

        # set variable keys
        sfcKey = "surface_type", "MetaData"
        szaKey = "sol_zenith_angle", "MetaData"
        saaKey = "sol_azimuth_angle", "MetaData"
        mduKey = "modis_deep_blue_flag", "MetaData"

        # defined surface type array
        sfctyp = 0*qcall

        count = 0
        for i in range(len(lons)):

            count += 1

            # convert byte to integer
            sfctyp[i] = int.from_bytes(qcpath[i], byteorder='big')

            locKey = lats[i], lons[i], base_datetime
            self.data[0][locKey][valKey] = vals[i]
            self.data[0][locKey][errKey] = errs[i]
            self.data[0][locKey][qcKey] = qcall[i]

            # solar zenith angle (sza) is set all 0 for test
            # solar azimuth angle (saa) is set  all 0 for test
            # modis_deep_blue_flag (mdu)is set all 0 for test
            self.data[0][locKey][szaKey] = 0.0
            self.data[0][locKey][saaKey] = 0.0
            self.data[0][locKey][sfcKey] = sfctyp[i]
            self.data[0][locKey][mduKey] = 0

            # write global attributes out
            if self.satellite == 'NPP':
                self.satellite = "suomi_npp"
            if self.sensor == 'VIIRS':
                self.sensor = "v.viirs-m_npp"

            AttrData["observation_type"] = "AOD"
            AttrData["satellite"] = self.satellite
            AttrData["sensor"] = self.sensor
            AttrData['date_time_string'] = base_datetime


def main():

    parser = argparse.ArgumentParser(
        description=('Read VIIRS aerosol optical depth file(s) and Converter'
                     ' of native NetCDF format for observations of optical'
                     ' depth from VIIRS AOD550 to IODA netCDF format.')
    )
    parser.add_argument('-i', '--input',
                        help="name of aod550 input file(s)",
                        type=str, required=True)
    parser.add_argument('-o', '--output',
                        help="name of ioda output file",
                        type=str, required=True)
    args = parser.parse_args()

    writer = iconv.NcWriter(args.output, locationKeyList)

    # Read in the profiles
    aod = AOD(args.input, writer)

    (ObsVars, LocMdata, VarMdata) = writer.ExtractObsData(aod.data)

    # set constants for the four variables
    VarMdata['frequency'] = np.full(1, 5.401666e+14, dtype='f4')
    VarMdata['polarization'] = np.full(1, 1, dtype='i4')
    VarMdata['wavenumber'] = np.full(1, 18161.61, dtype='f4')
    VarMdata['sensor_channel'] = np.full(1, 4, dtype='i4')

    writer.BuildNetcdf(ObsVars, LocMdata, VarMdata, AttrData)


if __name__ == '__main__':
    main()
