version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT

      - cd /
      - pwd
      - find . -name pyload


      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - groupadd jcsda -g 9999
      - useradd jcsdauser
      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /home/jcsdauser/.openmpi

      - cp default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"

      ## cannot source /etc/bash.bashrc so copy what's there for root
      - sed '12s/INTEL_TARGET_ARCH=/INTEL_TARGET_ARCH=intel64/' /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export COMPILERVARS_ARCHITECTURE=intel64
      - export COMPILERVARS_PLATFORM=linux
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export FC=mpiifort
      - export CC=mpiicc
      - export CXX=mpiicpc
      - export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - export LD_LIBRARY_PATH=/usr/local/lib
      - export LIBRARY_PATH=/usr/local/lib
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh

      - git lfs install
      - git clone https://github.com/jcsda/ioda-converters

  pre_build:
    commands:
      - echo Executing pre_build phase
      - git lfs install # creates .gitconfig
      - cp ~/.gitconfig /home/jcsdauser/

      - mv ioda-converters /jcsda/
  build:
    commands:
      - su - jcsdauser -c "export COMPILERVARS_ARCHITECTURE=intel64
        && export COMPILERVARS_PLATFORM=linux
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && export FC=mpiifort
        && export CC=mpiicc
        && export CXX=mpiicpc
        && export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        && export LD_LIBRARY_PATH=/usr/local/lib
        && export LIBRARY_PATH=/usr/local/lib
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && cd /build_container
        && echo $LD_LIBRARY_PATH
        && ecbuild /jcsda/ioda-converters
        && make -j4"

      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - su - jcsdauser -c "export COMPILERVARS_ARCHITECTURE=intel64
        && export COMPILERVARS_PLATFORM=linux
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && export FC=mpiifort
        && export CC=mpiicc
        && export CXX=mpiicpc
        && export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        && export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/python3/dist-packages
        && export LIBRARY_PATH=/usr/local/lib
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && echo $LD_LIBRARY_PATH
        && cd /build_container
        && ls
        && ctest"

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerun failed tests";
        su - jcsdauser -c "export COMPILERVARS_ARCHITECTURE=intel64
        && export COMPILERVARS_PLATFORM=linux
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && export FC=mpiifort
        && export CC=mpiicc
        && export CXX=mpiicpc
        && export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        && export LD_LIBRARY_PATH=/usr/local/lib
        && export LIBRARY_PATH=/usr/local/lib
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && cd /build_container
        && echo $LD_LIBRARY_PATH
        && ctest -VV --rerun-failed";
        else echo "Build failed";
        fi
