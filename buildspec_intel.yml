version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION

      - mkdir  /build_container
      - mkdir  /jcsda
      - echo $PATH
      - echo $LD_LIBRARY_PATH
      - echo $PYTHONPATH
      ## cannot source /etc/bash.bashrc so copy what's there for root
      - sed '12s/INTEL_TARGET_ARCH=/INTEL_TARGET_ARCH=intel64/' /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export COMPILERVARS_ARCHITECTURE=intel64
      - export COMPILERVARS_PLATFORM=linux
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export FC=mpiifort
      - export CC=mpiicc
      - export CXX=mpiicpc
      - export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - export LD_LIBRARY_PATH=/usr/local/lib
      - export LIBRARY_PATH=/usr/local/lib
      - export PYTHONPATH=/usr/local/lib
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh

      - pip install xarray
      - echo $PATH
      - echo $LD_LIBRARY_PATH
      - echo $PYTHONPATH

  pre_build:
    commands:
      - echo Executing pre_build phase
      - git lfs install # creates .gitconfig

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_MERGED" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else CODEBUILD_GIT_BRANCH="$(git branch -a --contains $CODEBUILD_RESOLVED_SOURCE_VERSION | sed -n 2p | awk '{ printf $1 }')";
        export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/ioda-converters
      - cd ioda-converters
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in saber-bundle repo"
      - cd $CODEBUILD_SRC_DIR

      - mv ioda-converters /jcsda/
  build:
    commands:
      
      - cd /build_container
      - ecbuild /jcsda/ioda-converters
      - make -j4
      - export PYTHONPATH=/usr/local/lib

      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS
      - ctest

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - echo $BUILD_STATUS
      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerun failed tests";
        ctest -VV --rerun-failed;
        else echo "Build failed";
        fi 
