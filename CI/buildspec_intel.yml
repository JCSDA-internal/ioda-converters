version: 0.2

env:
  shell: bash
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $CODEBUILD_SOURCE_REPO_URL
      - echo $CODEBUILD_SOURCE_VERSION

      - echo $CODEBUILD_WEBHOOK_MERGE_COMMIT
      - echo $CODEBUILD_WEBHOOK_PREV_COMMIT
      - echo $CODEBUILD_WEBHOOK_HEAD_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF


      - echo $PATH
      - echo $LD_LIBRARY_PATH
      - echo $PYTHONPATH
      - . /etc/profile.d/intel.sh

      - pip install xarray

  pre_build:
    commands:
      - echo Executing pre_build phase
      - git lfs install # creates .gitconfig

      # Codebuild only runs on PUSH events if HEAD_REF
      # is refs/heads/develop (merge to develop). In this
      # case CODEBUILD_GIT_BRANCH="develop"

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PUSH" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else export CODEBUILD_GIT_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"



      - if [ "$CODEBUILD_GIT_BRANCH" = "develop" ];
        then export CODEBUILD_GIT_BRANCH_FORK="release-stable";
        else export CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH};
        echo "CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH_FORK}";
        fi

      # Upload branch name and commit sha as CodeBuild artifact to S3
      - mkdir -p /jcsda/artifacts
      - echo ${CODEBUILD_GIT_BRANCH} > /jcsda/artifacts/branch_name.txt
      - echo ${CODEBUILD_RESOLVED_SOURCE_VERSION} > /jcsda/artifacts/commit_sha.txt

      - cd CI

      # ioda-converters (testing repo)
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/ioda-converters $CODEBUILD_GIT_BRANCH iodaconv /jcsda/ioda-bundle develop

      # jedi-cmake
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/jedi-cmake $CODEBUILD_GIT_BRANCH jedicmake /jcsda/ioda-bundle develop

     # oops
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/oops $CODEBUILD_GIT_BRANCH oops /jcsda/ioda-bundle develop

     # ioda
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/ioda $CODEBUILD_GIT_BRANCH ioda /jcsda/ioda-bundle develop

      # ioda-data
      - ./clone.sh $GIT_USER $GIT_PASS jcsda-internal/ioda-data $CODEBUILD_GIT_BRANCH ioda-data /jcsda/ioda-bundle develop

      - cp CMakeLists.txt /jcsda/ioda-bundle
      - cp -r cmake /jcsda/ioda-bundle/
      - cp /jcsda/ioda-bundle/cmake/CTestConfig.cmake /jcsda/ioda-bundle/

  build:
    on-failure: CONTINUE
    commands: 
      - cd /home/jedi
      - echo $PYTHONPATH
      - export PYTHONPATH=/usr/local/lib:/usr/local/lib/python3.8/site-packages:$PYTHONPATH
      - ecbuild -Wno-dev -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCDASH_OVERRIDE_GIT_BRANCH=$CODEBUILD_GIT_BRANCH -DCTEST_UPDATE_VERSION_ONLY=FALSE -DBUILD_PYTHON_BINDINGS=ON /jcsda/ioda-bundle/
      - cd /home/jedi/iodaconv
      - cp ../DartConfiguration.tcl .
      - sed -i 's/ioda-bundle/ioda-bundle\/iodaconv/' DartConfiguration.tcl
      - sed -i 's/jedi/jedi\/iodaconv/' DartConfiguration.tcl
      - cat DartConfiguration.tcl
      - make -j4

      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - ctest -C RelWithDebInfo -D ExperimentalTest

    finally:
      # upload ctest report to CDASH
      - ctest -C RelWithDebInfo -D ExperimentalSubmit -M Continuous -- --track Continuous --group Continuous

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$BUILD_STATUS" = "1" ];
        then echo "Build & tests passed, find cdash url";
        bash /jcsda/ioda-bundle/iodaconv/CI/cdash-url.sh /home/jedi/iodaconv/Testing;
        url=$(bash /jcsda/ioda-bundle/iodaconv/CI/cdash-url.sh /home/jedi/iodaconv/Testing);
        echo $url;
        echo ${url} > /jcsda/artifacts/cdash-url.txt;
        cat /jcsda/artifacts/cdash-url.txt;
        else echo "Build failed";
        fi

artifacts:
  files:
    - '/jcsda/artifacts/*'
  name: iodaconv-intel-url

