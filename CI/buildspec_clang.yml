version: 0.2

env:
  shell: bash
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION

      # read cdash url from s3
      - wget https://ci-test-cdash-url.s3.amazonaws.com/cdash_url.txt
      - CDASH_URL=$(cat cdash_url.txt)

      # Codebuild only runs on PUSH events if HEAD_REF
      # is refs/heads/develop (merge to develop). In this
      # case CODEBUILD_GIT_BRANCH="develop"
      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PUSH" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else export CODEBUILD_GIT_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/};
        fi

      # Determine the git base branch. This is the branch we are merging into.
      # It can be develop or another branch. It will be used as a fall back branch in clone.sh
      - export GIT_BASE_BRANCH=${CODEBUILD_WEBHOOK_BASE_REF#refs/heads/}

      - echo "GIT_BASE_BRANCH=${GIT_BASE_BRANCH}"
      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

  pre_build:
    commands:
      - echo Executing pre_build phase
      - mkdir -p /jcsda/ioda-bundle
      - mkdir /build_container

      - git lfs install
      - cd CI

      #  Setting git credentials
      - sed -i '/ssh/d' ~/.gitconfig
      - sed '/instead/d' ~/.gitconfig
      - git config --global credential.helper store
      - touch ~/.git-credentials
      - chmod 0700 ~/.git-credentials
      - echo "https://${GIT_USER}:${GIT_PASS}@github.com" >~/.git-credentials


      # Upload branch name and commit sha as CodeBuild artifact to S3
      - mkdir -p /jcsda/artifacts
      - echo ${CODEBUILD_GIT_BRANCH} > /jcsda/artifacts/branch_name.txt
      - echo ${CODEBUILD_RESOLVED_SOURCE_VERSION} > /jcsda/artifacts/commit_sha.txt

      # ioda-converters (testing repo)
      - ./clone.sh jcsda-internal/ioda-converters $CODEBUILD_GIT_BRANCH  /jcsda/ioda-bundle iodaconv ${GIT_BASE_BRANCH} develop

      # oops
      - ./clone.sh jcsda-internal/oops $CODEBUILD_GIT_BRANCH /jcsda/ioda-bundle oops ${GIT_BASE_BRANCH} develop

      # ioda
      - ./clone.sh jcsda-internal/ioda $CODEBUILD_GIT_BRANCH /jcsda/ioda-bundle ioda ${GIT_BASE_BRANCH} develop

      # ioda-data
      - ./clone.sh jcsda-internal/ioda-data $CODEBUILD_GIT_BRANCH /jcsda/ioda-bundle ioda-data ${GIT_BASE_BRANCH} develop

      # move CMakeLists.txt from ioda-converters/CI to bundle directory
      - cp CMakeLists.txt /jcsda/ioda-bundle
      - cp -r cmake /jcsda/ioda-bundle/
      - cp /jcsda/ioda-bundle/cmake/CTestConfig.cmake /jcsda/ioda-bundle/
      - sed -i "s@CDASH_URL@$CDASH_URL@g" /jcsda/ioda-bundle/CTestConfig.cmake
      - ls /jcsda/ioda-bundle/

  build:
    on-failure: CONTINUE
    commands:
      - echo Executing build phase
      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - cd /build_container
      - source /etc/profile.d/z10_spack_environment.sh
      # Set PYTHONPATH for pyioda
      - export PYTHONPATH="/jcsda/ioda-bundle/ioda/src/engines/ioda/python/pyioda:$PYTHONPATH"
      - export | grep PYTHONPATH
      - ecbuild -Wno-dev -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCDASH_OVERRIDE_SITE=CodeBuild -DCDASH_OVERRIDE_SYSTEM_NAME=ClangContainer -DCDASH_OVERRIDE_GIT_BRANCH=$CODEBUILD_GIT_BRANCH -DCTEST_UPDATE_VERSION_ONLY=FALSE -DUSE_ECCODES=ON /jcsda/ioda-bundle

      # Build ioda
      - cd /build_container/ioda
      - cp ../DartConfiguration.tcl .
      - sed -i 's/ioda-bundle/ioda-bundle\/ioda/' DartConfiguration.tcl
      - sed -i 's/build_container/build_container\/ioda/' DartConfiguration.tcl
      - cat DartConfiguration.tcl
      - ctest -C RelWithDebInfo -V -D ExperimentalBuild -j4

      # Install python-based ioda-converters
      - cd /jcsda/ioda-bundle/iodaconv
      - python3 -m pip install -e .

      # Build ioda-converters
      - cd /build_container/iodaconv
      - cp ../DartConfiguration.tcl .
      - sed -i 's/ioda-bundle/ioda-bundle\/iodaconv/' DartConfiguration.tcl
      - sed -i 's/build_container/build_container\/iodaconv/' DartConfiguration.tcl
      - cat DartConfiguration.tcl
      - ctest -C RelWithDebInfo -V -D ExperimentalBuild -j4

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - echo "1"
      - ls -l /build_container/iodaconv
      - echo "2"
      - ls -l /build_container/iodaconv/*
      - echo "3"
      - ls -l /opt/view/lib/python3.10/site-packages
      - echo "4"
      - ls -l /jcsda/ioda-bundle/ioda/src/engines/ioda/python/pyioda
      - find /jcsda/ioda-bundle -iname '*_ioda_python*'
      - find /opt/view -iname '*_ioda_python*'
      - find /build_container -iname '*_ioda_python*'

      #- exit 1
      # run ctest
      - cd /build_container/iodaconv
      - ctest -C RelWithDebInfo -D ExperimentalTest -R test_iodaconv_generic_gnssro_bufr --verbose
      - ctest -C RelWithDebInfo -D ExperimentalTest

    finally:
      - cd /build_container/iodaconv
      - ctest -C RelWithDebInfo -D ExperimentalSubmit -M Continuous -- --track Continuous --group Continuous

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - echo $BUILD_STATUS

      # upload find cdash url and upload it as CodeBuild artifact to S3
      - if [ "$BUILD_STATUS" = "1" ];
        then echo "Build & tests passed, find cdash url";
        url=$(bash /jcsda/ioda-bundle/iodaconv/CI/cdash-url.sh /build_container/iodaconv/Testing $CDASH_URL);
        echo $url;
        echo ${url} > /jcsda/artifacts/cdash-url.txt;
        cat /jcsda/artifacts/cdash-url.txt;
        else echo "Build failed";
        fi
artifacts:
  files:
    - '/jcsda/artifacts/*'
  name: iodaconv-clang-url
